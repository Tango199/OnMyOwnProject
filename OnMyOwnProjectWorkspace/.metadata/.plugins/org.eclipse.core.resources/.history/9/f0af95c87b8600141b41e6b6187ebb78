package OnMyOwnProjectSchoolSelectionProgram;

import java.io.*;
import java.util.*;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;

import Core.ProblemInfo;

public class OnMyOwnProjectSchoolSelectionProgram 
{
	List<Student> students = new ArrayList<Student>();
	List<School> schools = new ArrayList<School>();
	
	public OnMyOwnProjectSchoolSelectionProgram()
	{
		ProblemInfo.inputPath = ProblemInfo.workingDirectory + "\\data\\input\\";
		ProblemInfo.outputPath = ProblemInfo.workingDirectory + "\\data\\output\\";
		boolean done = false;
		try {
			readInSchools();
			readInStudents();
		} catch (IOException e) {
			e.printStackTrace();
		}
		//writeInputOut();
		int randNum;
		String firstChoice;
		String secondChoice;
		String thirdChoice;
		
		while (!done)
		{
			randNum = getRandomNumber();
			firstChoice = students.get(randNum).getStudentsFirstChoice();
			secondChoice = students.get(randNum).getStudentsSecondChoice();
			thirdChoice = students.get(randNum).getStudentsThirdChoice();
			
			for(int i=0; i < ProblemInfo.numSchools;i++)
			{
				if(firstChoice.equals(schools.get(i).getSchoolName()))
				{
					if(schools.get(i).getNumStudentsPerSchool() > 0)
					{
						schools.get(i).minusOneStudentFromSchoolCounter();
						students.get(randNum).assign();
						ProblemInfo.print(students.get(randNum).getStudentsName() + " was placed in " + schools.get(i).getSchoolName() + "as their first choice");
					}
					else
					{
						//student didnt get their first choice
						ProblemInfo.print(students.get(randNum).getStudentsName() + "didnt get his first choice");
						
					
					}
					
				}
				ProblemInfo.print(i);
			}
			
			/*for(int i=0;i<ProblemInfo.numStudents;i++)
			{
				if(!students.get(i).isAssigned())
				{
					done = false;
					students.get(i).assign();
				}
				else
				{
					done = true;
					
				}
			}*/
		}
		ProblemInfo.print("done");
	}
	public void readInStudents() throws IOException
	{
		try
		{
			FileInputStream fileStudent = new FileInputStream(new File(ProblemInfo.inputPath + "Students.xls"));
			HSSFWorkbook studentWorkbook = new HSSFWorkbook(fileStudent);
			HSSFSheet studentSheet = studentWorkbook.getSheetAt(0);
			ProblemInfo.numStudents = studentSheet.getPhysicalNumberOfRows() -1;
			Cell cell = null;
			int rowCounter = 1;
			int colCounter = 0;
			String nameOfStudent;
			String firstChoice;
			String secondChoice;
			String thirdChoice;
			
			for(int i=ProblemInfo.numStudents; i >0; i--)
			{
				cell = studentSheet.getRow(rowCounter).getCell(colCounter++);
				nameOfStudent = cell.toString();
				cell = studentSheet.getRow(rowCounter).getCell(colCounter++);
				firstChoice = cell.toString();
				cell = studentSheet.getRow(rowCounter).getCell(colCounter++);
				secondChoice = cell.toString();
				cell = studentSheet.getRow(rowCounter).getCell(colCounter++);
				thirdChoice = cell.toString();
				
				students.add(new Student(nameOfStudent,firstChoice,secondChoice,thirdChoice));
				rowCounter++;
				colCounter=0;
				
			}
			
			fileStudent.close();
		}
		catch(FileNotFoundException e){
			e.printStackTrace();
		}
		
	}
	public void readInSchools() throws IOException
	{
		try {
			FileInputStream fileSchool = new FileInputStream(new File(ProblemInfo.inputPath + "Schools.xls"));
			HSSFWorkbook schoolWorkbook = new HSSFWorkbook(fileSchool);
			HSSFSheet schoolSheet = schoolWorkbook.getSheetAt(0);
			ProblemInfo.numSchools = schoolSheet.getPhysicalNumberOfRows() -1;
			Cell cell = null;
		
			int rowCountSchools = 1;
			int colCounter = 0;
			String schoolName;
			String tempString;
			int numStudentsPerSchool;
			
		
			for(int numSchools = ProblemInfo.numSchools;numSchools>0;numSchools--)
			{
				cell = schoolSheet.getRow(rowCountSchools).getCell(colCounter++);
				schoolName = cell.toString();
				cell = schoolSheet.getRow(rowCountSchools).getCell(colCounter);
				tempString = cell.toString();
				tempString = tempString.substring(0,tempString.length()-2);
				numStudentsPerSchool = Integer.parseInt(tempString);
				rowCountSchools++;
				colCounter=0;
				schools.add(new School(schoolName,numStudentsPerSchool));
				
				
			}
		fileSchool.close();
			
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
		}
	}
	public void writeInputOut()
	{
		HSSFWorkbook printOutWorkBook = new HSSFWorkbook();
		HSSFSheet printSheet = printOutWorkBook.createSheet("Read In Data");
		int rowNum =0;
		Row row = printSheet.createRow(rowNum);
		Cell cell = row.createCell(0);
		cell.setCellValue("SCHOOLS");
		row = printSheet.createRow(++rowNum);
		cell = row.createCell(0);
		cell.setCellValue("Name of School");
		cell=row.createCell(1);
		cell.setCellValue("Number of students allowed");
		
		
		for(int i=0;i<ProblemInfo.numSchools;i++)
		{
			row= printSheet.createRow(++rowNum);
			cell=row.createCell(0);
			cell.setCellValue(schools.get(i).getSchoolName());
			cell=row.createCell(1);
			cell.setCellValue(schools.get(i).getNumStudentsPerSchool());
			
		}
		
		row = printSheet.createRow(++rowNum);
		row = printSheet.createRow(++rowNum);
		
		cell = row.createCell(0);
		cell.setCellValue("STUDENTS");
		row = printSheet.createRow(++rowNum);
		cell=row.createCell(0);
		cell.setCellValue("Student Name");
		cell=row.createCell(1);
		cell.setCellValue("Student First Choice");
		cell=row.createCell(2);
		cell.setCellValue("Student Second Choice");
		cell=row.createCell(3);
		cell.setCellValue("Student Third Choice");
		
		for(int i=0;i<ProblemInfo.numStudents;i++)
		{
			row = printSheet.createRow(++rowNum);
			cell=row.createCell(0);
			cell.setCellValue(students.get(i).getStudentsName());
			cell = row.createCell(1);
			cell.setCellValue(students.get(i).getStudentsFirstChoice());
			cell = row.createCell(2);
			cell.setCellValue(students.get(i).getStudentsSecondChoice());
			cell = row.createCell(3);
			cell.setCellValue(students.get(i).getStudentsThirdChoice());
		}
		
		for(int i=0; i < 6; i++)
		{
			printSheet.autoSizeColumn(i);
		}
		
		try {
			FileOutputStream inputFileOut =
					new FileOutputStream(new File(ProblemInfo.
							outputPath + "inputInfoCheck.xls"));
			printOutWorkBook.write(inputFileOut);
			inputFileOut.close();
			ProblemInfo.print("Done Printing out inputInfoCheck.xls");


		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
	}
	public int getRandomNumber()
	{
		int randNum = 0;
		Random rand = new Random();
		randNum = rand.nextInt(((ProblemInfo.numStudents-1)-0)+1)+0;
		
		return randNum;
	}
}
